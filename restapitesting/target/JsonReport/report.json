[
  {
    "comments": [
      {
        "line": 1,
        "value": "#Author: Mirtunjay1984@gmail.com"
      },
      {
        "line": 2,
        "value": "#Scenario: Splunk \u003d\u003e Movie data business verification"
      },
      {
        "line": 3,
        "value": "#DateCreated: 6Oct2018"
      },
      {
        "line": 4,
        "value": "#Sorted Alogrithm for SPL003 :: Sorting requirement. Rule #1 Movies with genre_ids \u003d\u003d null should be first in response. Rule #2, if multiple movies have genre_ids \u003d\u003d null, then sort by id (ascending). For movies that have non-null genre_ids, results should be sorted by id (ascending)"
      }
    ],
    "line": 7,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 345610422,
              "status": "passed"
            },
            "match": {
              "location": "MovieActions.beforeScenario(Scenario)"
            }
          }
        ],
        "line": 19,
        "name": "Verify no two movie should have same image/poster path",
        "description": "",
        "id": "splunk---sdet;verify-no-two-movie-should-have-same-image/poster-path;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "text/html"
              }
            ],
            "result": {
              "duration": 40823808783,
              "status": "passed"
            },
            "line": 11,
            "name": "User submit GET request with below parameter and get movie data response",
            "match": {
              "location": "Steps.user_submit_GET_request_with_below_parameter_and_get_movie_data_response(DataTable)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "Param_Required_q",
                  "batman"
                ],
                "line": 12
              },
              {
                "cells": [
                  "Param_Optional_count",
                  "0"
                ],
                "line": 13
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 29278393,
              "status": "passed"
            },
            "line": 14,
            "name": "User verifies response status code is \"200\"",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 39
                }
              ],
              "location": "Steps.user_verifies_response_status_code_is(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "Then "
          },
          {
            "embeddings": [
              {
                "data": "PHRhYmxlIGJvcmRlcj0nMSc+IDx0ciA+IDx0aCBjb2xzcGFuPScxJz48Y2VudGVyPiBEdXBsaWNhdGUgUG9zdGVyIFBhdGgvcyBEZXRhaWw8L2NlbnRlcj48L3RoPjx0cj48dGQ+PGxlZnQ+IGh0dHBzOi8vd3d3LmRyb3Bib3guY29tL3MvMmpkYThodTIweTk5anhsL2NpbmVtYS1mb29kLW1vdmllLXRoZWF0ZXItMzMxMjkuanBnP2RsPTA8L2xlZnQ+PC90ZD48L3RyPjwvdGFibGU+",
                "mime_type": "text/html"
              }
            ],
            "result": {
              "duration": 6373558018,
              "error_message": "java.lang.AssertionError: Two or more Movies has same image/poster path.\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat com.splunk.actions.MovieActions.verifyNoTwoMoviesHasSameImage(MovieActions.java:117)\r\n\tat com.splunk.steps.Steps.user_verifies_no_two_movie_has_same_image(Steps.java:28)\r\n\tat ✽.And User verifies no two movie has same image(feature/splunkrestapitest.feature:15)\r\n",
              "status": "failed"
            },
            "line": 15,
            "name": "User verifies no two movie has same image",
            "match": {
              "location": "Steps.user_verifies_no_two_movie_has_same_image()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 6,
            "name": "@RegressionTest"
          },
          {
            "line": 9,
            "name": "@SPL-001"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 80395,
              "status": "passed"
            },
            "match": {
              "location": "MovieActions.beforeScenario(Scenario)"
            }
          }
        ],
        "line": 31,
        "name": "Verify all poster path should be either valid or null",
        "description": "",
        "id": "splunk---sdet;verify-all-poster-path-should-be-either-valid-or-null;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "embeddings": [
              {
                "data": "ewogICJyZXN1bHRzIjogWwogICAgewogICAgICAidm90ZV9jb3VudCI6IDEyLAogICAgICAiaWQiOiAyODc3NTcsCiAgICAgICJ2aWRlbyI6IHRydWUsCiAgICAgICJ2b3RlX2F2ZXJhZ2UiOiA1LjgsCiAgICAgICJ0aXRsZSI6ICJTY29vYnktRG9vIE1lZXRzIERhbnRlIiwKICAgICAgInBvcHVsYXJpdHkiOiAyLjcxNDgwMywKICAgICAgInBvc3Rlcl9wYXRoIjogImh0dHBzOi8vd3d3LmRyb3Bib3guY29tL3MvOGk4djRhazh0bnAwM3c0L2FjdGlvbi1ibHVyLWVsZWN0cm9uaWNzLTI0NzkzMi5qcGc/ZGw9MCIsCiAgICAgICJvcmlnaW5hbF9sYW5ndWFnZSI6ICJlbiIsCiAgICAgICJvcmlnaW5hbF90aXRsZSI6ICJTY29vYnktRG9vIE1lZXRzIEJhdG1hbiIsCiAgICAgICJnZW5yZV9pZHMiOiBbCiAgICAgICAgMTA3NTEsCiAgICAgICAgMTYKICAgICAgXSwKICAgICAgImFkdWx0IjogZmFsc2UsCiAgICAgICJvdmVydmlldyI6ICJTY29vYnktRG9vIE1lZXRzIEJhdG1hbiBpcyBhIHZpZGVvIGNvbXBpbGF0aW9uIGZyb20gV2FybmVyIEJyb3MuIEhvbWUgRW50ZXJ0YWlubWVudC4gSXQgY29uc2lzdHMgb2YgdHdvIGVwaXNvZGVzIGZyb20gSGFubmEtQmFyYmVyYSdzIFRoZSBOZXcgU2Nvb2J5LURvbyBNb3ZpZXMsIFwiVGhlIER5bmFtaWMgU2Nvb2J5IERvbyBBZmZhaXJcIiBhbmQgXCJUaGUgQ2FwZWQgQ3J1c2FkZXIgQ2FwZXJcIiwgd2hlcmUgU2Nvb2J5LURvbyBhbmQgdGhlIGdhbmcgdGVhbSB1cCB3aXRoIEJhdG1hbiBhbmQgUm9iaW4gdG8gY2FwdHVyZSBKb2tlciBhbmQgdGhlIFBlbmd1aW4uIiwKICAgICAgInJlbGVhc2VfZGF0ZSI6ICIyMDAyLTA4LTIwIgogICAgfSwKICAgIHsKICAgICAgInZvdGVfY291bnQiOiA2LAogICAgICAiaWQiOiAyMDQ2NDksCiAgICAgICJ2aWRlbyI6IGZhbHNlLAogICAgICAidm90ZV9hdmVyYWdlIjogNywKICAgICAgInRpdGxlIjogIkJhdG1hbjogQmV5b25kIEJhdG1hbiIsCiAgICAgICJwb3B1bGFyaXR5IjogMS4yMTQ4NDYsCiAgICAgICJwb3N0ZXJfcGF0aCI6ICJodHRwczovL3d3dy5kcm9wYm94LmNvbS9zL29wZmNwNHVhNWZtZHN6ai9hY3Rvci1hY3RyZXNzLWFkdWx0LTk3NDQ3Ny5qcGc/ZGw9MCIsCiAgICAgICJvcmlnaW5hbF9sYW5ndWFnZSI6ICJlbiIsCiAgICAgICJvcmlnaW5hbF90aXRsZSI6ICJCYXRtYW46IEJleW9uZCBCYXRtYW4iLAogICAgICAiZ2VucmVfaWRzIjogW10sCiAgICAgICJiYWNrZHJvcF9wYXRoIjogbnVsbCwKICAgICAgImFkdWx0IjogZmFsc2UsCiAgICAgICJvdmVydmlldyI6ICJCZWhpbmQgdGhlIHNjZW5lcyBkb2N1bWVudGFyeSBoaWdobGlnaHRpbmcgcHJvZHVjdGlvbiBkZXNpZ24sIHByb3BzICZhbXA7IGdhZGdldHMsIGJhdG1vYmlsZS9iYXRzdWl0IGRlc2lnbiwgYW5kIHRoZSBtdXNpYyBvZiB0aGUgMTk4OSBCYXRtYW4uIiwKICAgICAgInJlbGVhc2VfZGF0ZSI6ICIyMDA1LTA3LTA0IgogICAgfSwKICAgIHsKICAgICAgInZvdGVfY291bnQiOiA1LAogICAgICAiaWQiOiA0MDQ0NjMsCiAgICAgICJ2aWRlbyI6IGZhbHNlLAogICAgICAidm90ZV9hdmVyYWdlIjogNC43LAogICAgICAidGl0bGUiOiAiRGFudGUiLAogICAgICAicG9wdWxhcml0eSI6IDEuNTA3NjE5LAogICAgICAicG9zdGVyX3BhdGgiOiAiaHR0cHM6Ly93d3cuZHJvcGJveC5jb20vcy8xcWNsNWYzbzFkbXNuMGQvYWR1bHQtYmVhcmQtZWxlY3Ryb25pY3MtODE5ODQ4LmpwZz9kbD0wIiwKICAgICAgIm9yaWdpbmFsX2xhbmd1YWdlIjogImVuIiwKICAgICAgIm9yaWdpbmFsX3RpdGxlIjogIkJhdG1hbjogRGFudGUiLAogICAgICAiZ2VucmVfaWRzIjogWwogICAgICAgIDI4LAogICAgICAgIDgwLAogICAgICAgIDE4CiAgICAgIF0sCiAgICAgICJhZHVsdCI6IGZhbHNlLAogICAgICAib3ZlcnZpZXciOiAiQmF0bWFuIGludGVydmVuZXMgaW4gdGhlIGxpZmUgb2YgYSBqdW5raWUuIiwKICAgICAgInJlbGVhc2VfZGF0ZSI6ICIyMDE2LTA4LTA1IgogICAgfSwKICAgIHsKICAgICAgInZvdGVfY291bnQiOiA1MCwKICAgICAgImlkIjogNDExNzM2LAogICAgICAidmlkZW8iOiBmYWxzZSwKICAgICAgInZvdGVfYXZlcmFnZSI6IDcsCiAgICAgICJ0aXRsZSI6ICJCYXRtYW46IFJldHVybiBvZiB0aGUgS2F5YWsgQ3J1c2FkZXJzIiwKICAgICAgInBvcHVsYXJpdHkiOiA0LjU0NDAwNSwKICAgICAgInBvc3Rlcl9wYXRoIjogImh0dHBzOi8vd3d3LmRyb3Bib3guY29tL3MvMGo1bzMwdDFoMjF1MnB3L2FyY2hpdGVjdHVyZS1ibHVlYmlyZC10aGVhdHJlLWJ1aWxkaW5nLTIwODY0Ny5qcGc/ZGw9MCIsCiAgICAgICJvcmlnaW5hbF9sYW5ndWFnZSI6ICJlbiIsCiAgICAgICJvcmlnaW5hbF90aXRsZSI6ICJCYXRtYW46IFJldHVybiBvZiB0aGUgQ2FwZWQgQ3J1c2FkZXJzIiwKICAgICAgImdlbnJlX2lkcyI6IFsKICAgICAgICAyOCwKICAgICAgICAxNiwKICAgICAgICAzNQogICAgICBdLAogICAgICAiYWR1bHQiOiBmYWxzZSwKICAgICAgIm92ZXJ2aWV3IjogIkFkYW0gV2VzdCBhbmQgQnVydCBXYXJkIHJldHVybnMgdG8gdGhlaXIgaWNvbmljIHJvbGVzIG9mIEJhdG1hbiBhbmQgUm9iaW4uIEZlYXR1cmluZyB0aGUgdm9pY2VzIG9mIEFkYW0gV2VzdCwgQnVydCBXYXJkLCBhbmQgSnVsaWUgTmV3bWFyLCB0aGUgZmlsbSBzZWVzIHRoZSBzdXBlcmhlcm9lcyBnb2luZyB1cCBhZ2FpbnN0IGNsYXNzaWMgdmlsbGFpbnMgbGlrZSBUaGUgSm9rZXIsIFRoZSBSaWRkbGVyLCBUaGUgUGVuZ3VpbiBhbmQgQ2F0d29tYW4sIGJvdGggaW4gR290aGFtIENpdHmFIGFuZCBpbiBzcGFjZS4iLAogICAgICAicmVsZWFzZV9kYXRlIjogIjIwMTYtMTAtMDgiCiAgICB9LAogICAgewogICAgICAidm90ZV9jb3VudCI6IDE2LAogICAgICAiaWQiOiA0MTE4MDIsCiAgICAgICJ2aWRlbyI6IGZhbHNlLAogICAgICAidm90ZV9hdmVyYWdlIjogNS41LAogICAgICAidGl0bGUiOiAiQmF0bWFuIFVubGltaXRlZDogTWVjaHMgdnMuIE11dGFudHMiLAogICAgICAicG9wdWxhcml0eSI6IDIuOTg0NDQxLAogICAgICAicG9zdGVyX3BhdGgiOiAiaHR0cHM6Ly93d3cuZHJvcGJveC5jb20vcy94czV3NXY0M2xwZmc0dmovYXVkaXRvcml1bS1jaGFpcnMtY29tZm9ydGFibGUtMjY5MTQwLmpwZz9kbD0wIiwKICAgICAgIm9yaWdpbmFsX2xhbmd1YWdlIjogImVuIiwKICAgICAgIm9yaWdpbmFsX3RpdGxlIjogIkJhdG1hbiBVbmxpbWl0ZWQ6IE1lY2hzIHZzLiBNdXRhbnRzIiwKICAgICAgImdlbnJlX2lkcyI6IFsKICAgICAgICAxNgogICAgICBdLAogICAgICAiYWR1bHQiOiBmYWxzZSwKICAgICAgIm92ZXJ2aWV3IjogIk1yLiBGcmVlemUgdHVybnMgS2lsbGVyIG1hZGFtIGFuZCBCYW5lIGludG8gc3VwZXItc2l6ZWQgbW9uc3RlcnMsIGFuZCB0aGV5IGJhc2ggdGhlaXIgd2F5IHRocm91Z2ggZG93bnRvd24gR290aGFtIHVudGlsIHRoZSBDYXBlZCBDcnVzYWRlciBhbmQgaGlzIHRlYW0gb2YgaGVyb2VzIGpvaW4gdGhlIGZpZ2h0IGluIHRoZWlyIGdpYW50IHJvYm90IG1lY2hzLiIsCiAgICAgICJyZWxlYXNlX2RhdGUiOiAiMjAxNi0wOC0zMCIKICAgIH0sCiAgICB7CiAgICAgICJ2b3RlX2NvdW50IjogMTA4OTEsCiAgICAgICJpZCI6IDQ5MDI2LAogICAgICAidmlkZW8iOiBmYWxzZSwKICAgICAgInZvdGVfYXZlcmFnZSI6IDcuNiwKICAgICAgInRpdGxlIjogIlRoZSBEYXJrIEtuaWdodCBSaXNlcyIsCiAgICAgICJwb3B1bGFyaXR5IjogNTguMDA0NjI1LAogICAgICAicG9zdGVyX3BhdGgiOiAiaHR0cHM6Ly93d3cuZHJvcGJveC5jb20vcy90cjlsaG1zdWt5cjYybmYvYmxhY2stYW5kLXdoaXRlLWNhaXhhLWJlbGFzLWFydGVzLWNpbmVtYS02NTQzNy5qcGc/ZGw9MCIsCiAgICAgICJvcmlnaW5hbF9sYW5ndWFnZSI6ICJlbiIsCiAgICAgICJvcmlnaW5hbF90aXRsZSI6ICJUaGUgRGFyayBLbmlnaHQgUmlzZXMiLAogICAgICAiZ2VucmVfaWRzIjogWwogICAgICAgIDI4LAogICAgICAgIDgwLAogICAgICAgIDE4LAogICAgICAgIDUzCiAgICAgIF0sCiAgICAgICJhZHVsdCI6IGZhbHNlLAogICAgICAib3ZlcnZpZXciOiAiRm9sbG93aW5nIHRoZSBkZWF0aCBvZiBEaXN0cmljdCBBdHRvcm5leSBIYXJ2ZXkgRGVudCwgQmF0bWFuIGFzc3VtZXMgcmVzcG9uc2liaWxpdHkgZm9yIERlbnQncyBjcmltZXMgdG8gcHJvdGVjdCB0aGUgbGF0ZSBhdHRvcm5leSdzIHJlcHV0YXRpb24gYW5kIGlzIHN1YnNlcXVlbnRseSBodW50ZWQgYnkgdGhlIEdvdGhhbSBDaXR5IFBvbGljZSBEZXBhcnRtZW50LiBFaWdodCB5ZWFycyBsYXRlciwgQmF0bWFuIGVuY291bnRlcnMgdGhlIG15c3RlcmlvdXMgU2VsaW5hIEt5bGUgYW5kIHRoZSB2aWxsYWlub3VzIEJhbmUsIGEgbmV3IHRlcnJvcmlzdCBsZWFkZXIgd2hvIG92ZXJ3aGVsbXMgR290aGFtJ3MgZmluZXN0LiBUaGUgRGFyayBLbmlnaHQgcmVzdXJmYWNlcyB0byBwcm90ZWN0IGEgY2l0eSB0aGF0IGhhcyBicmFuZGVkIGhpbSBhbiBlbmVteS4iLAogICAgICAicmVsZWFzZV9kYXRlIjogIjIwMTItMDctMTYiCiAgICB9LAogICAgewogICAgICAidm90ZV9jb3VudCI6IDE2LAogICAgICAiaWQiOiAyMDc3NiwKICAgICAgInZpZGVvIjogZmFsc2UsCiAgICAgICJ2b3RlX2F2ZXJhZ2UiOiA1LjgsCiAgICAgICJ0aXRsZSI6ICJSZXR1cm4gdG8gdGhlIEJhdGNhdmU6IFRoZSBNaXNhZHZlbnR1cmVzIG9mIEFkYW0gYW5kIEJ1cnQiLAogICAgICAicG9wdWxhcml0eSI6IDIuOTk3ODM3LAogICAgICAicG9zdGVyX3BhdGgiOiAiaHR0cHM6Ly93d3cuZHJvcGJveC5jb20vcy9sM3F5aW9tcGxvMXh5MnAvY2FuZHktZGVsaWNpb3VzLWVhdGluZy0yOTA0LmpwZz9kbD0wIiwKICAgICAgIm9yaWdpbmFsX2xhbmd1YWdlIjogImVuIiwKICAgICAgIm9yaWdpbmFsX3RpdGxlIjogIlJldHVybiB0byB0aGUgQmF0Y2F2ZTogVGhlIE1pc2FkdmVudHVyZXMgb2YgQWRhbSBhbmQgQnVydCIsCiAgICAgICJnZW5yZV9pZHMiOiBbCiAgICAgICAgMzUsCiAgICAgICAgMjgsCiAgICAgICAgOTkKICAgICAgXSwKICAgICAgImFkdWx0IjogZmFsc2UsCiAgICAgICJvdmVydmlldyI6ICJBZGFtIFdlc3QgYW5kIEJ1cnQgV2FyZCBhcmUgdGFrZW4gb24gYSBjcmF6eSBhZHZlbnR1cmUgd2hlbiB0aGUgQmF0bW9iaWxlIGlzIHN0b2xlbiBmcm9tIGEgY2FyIG11c2V1bSBhbmQgdGhleSBtdXN0IHRyYWNrIGRvd24gdGhlIHRoaWVmIGFuZCByZXR1cm4gaXQuIEFmdGVyIHNvbHZpbmcgYSBwdXp6bGUsIHRoZXkgcmVhbGl6ZSB0aGF0IHRoZSBjbHVlcyB0byBmaW5kaW5nIHRoZSBmaWVuZCB3aG8gc3RvbGUgdGhlIEJhdG1vYmlsZSBhcmUgaGlkZGVuIGluIHRoZWlyIHBhc3QuIER1cmluZyB0aGUgc2VhcmNoLCB0aGV5IGZsYXNoYmFjayB0byB0aGVpciB0aHJlZSBzZWFzb25zIGluIHRpZ2h0cywgaW5jbHVkaW5nIHRoZWlyIG1hbnkgc2V4dWFsIGVzY2FwYWRlcy4iLAogICAgICAicmVsZWFzZV9kYXRlIjogIjIwMDMtMDMtMDkiCiAgICB9LAogICAgewogICAgICAidm90ZV9jb3VudCI6IDYsCiAgICAgICJpZCI6IDkzNTYwLAogICAgICAidmlkZW8iOiBmYWxzZSwKICAgICAgInZvdGVfYXZlcmFnZSI6IDYuMiwKICAgICAgInRpdGxlIjogIkJhdG1hbiBhbmQgUm9iaW4iLAogICAgICAicG9wdWxhcml0eSI6IDEuMzI5NjAyLAogICAgICAicG9zdGVyX3BhdGgiOiAiaHR0cHM6Ly93d3cuZHJvcGJveC5jb20vcy8yamRhOGh1MjB5OTlqeGwvY2luZW1hLWZvb2QtbW92aWUtdGhlYXRlci0zMzEyOS5qcGc/ZGw9MCIsCiAgICAgICJvcmlnaW5hbF9sYW5ndWFnZSI6ICJlbiIsCiAgICAgICJvcmlnaW5hbF90aXRsZSI6ICJCYXRtYW4gYW5kIFJvYmluIiwKICAgICAgImdlbnJlX2lkcyI6IFsKICAgICAgICAyOCwKICAgICAgICA4NzgsCiAgICAgICAgNTMKICAgICAgXSwKICAgICAgImFkdWx0IjogZmFsc2UsCiAgICAgICJvdmVydmlldyI6ICJUaGlzIDE1LWNoYXB0ZXIgc2VyaWFsIHBpdHMgQmF0bWFuIGFuZCBSb2JpbiBhZ2FpbnN0IFRoZSBXaXphcmQsIHdobyB1c2VzIGEgZGV2aWNlIHRoYXQgYWxsb3dzIGhpbSB0byBjb250cm9sIG1hY2hpbmVyeSB0byBob2xkIHRoZSBjaXR5IGhvc3RhZ2UuIiwKICAgICAgInJlbGVhc2VfZGF0ZSI6ICIxOTQ5LTA1LTI2IgogICAgfSwKICAgIHsKICAgICAgInZvdGVfY291bnQiOiA1LAogICAgICAiaWQiOiAxODY1NzksCiAgICAgICJ2aWRlbyI6IGZhbHNlLAogICAgICAidm90ZV9hdmVyYWdlIjogOCwKICAgICAgInRpdGxlIjogIkJhdG1hbiBUZWNoIiwKICAgICAgInBvcHVsYXJpdHkiOiAxLjI1MjM0NywKICAgICAgInBvc3Rlcl9wYXRoIjogImh0dHBzOi8vd3d3LmRyb3Bib3guY29tL3MvMmpkYThodTIweTk5anhsL2NpbmVtYS1mb29kLW1vdmllLXRoZWF0ZXItMzMxMjkuanBnP2RsPTAiLAogICAgICAib3JpZ2luYWxfbGFuZ3VhZ2UiOiAiZW4iLAogICAgICAib3JpZ2luYWxfdGl0bGUiOiAiQmF0bWFuIFRlY2giLAogICAgICAiZ2VucmVfaWRzIjogWwogICAgICAgIDk5CiAgICAgIF0sCiAgICAgICJhZHVsdCI6IGZhbHNlLAogICAgICAib3ZlcnZpZXciOiAiSGUncyBjYXBlZCwgY293bGVkIGFuZCB0aGUgY29vbGVzdCBzdXBlcmhlcm8gb2YgdGhlbSBhbGwsIGJlY2F1c2UgdW5kZXJuZWF0aCB0aGF0IEJhdHN1aXQsIEJhdG1hbiBvbmx5IGhhcyBoaXMgaHVtYW4gc3RyZW5ndGggYW5kIGludGVsbGVjdCB0byByZWx5IG9uLiBUaGF0IGFuZCB0aGUgZ3JlYXRlc3QgYXJzZW5hbCBvZiBjcmltZSBmaWdodGluZyB3ZWFwb25yeSBldmVyIGRldmlzZWQuIEJ1dCBqdXN0IHdoZXJlIGRvZXMgY29taWMgYm9vayBzY2llbmNlIGZpY3Rpb24gZW5kIGFuZCBzY2llbnRpZmljIGZhY3QgYmVnaW4/IFdoYXQgdGVjaG5vbG9naWVzIGFyZSBiZWhpbmQgdGhlIGdhZGdldHMgaW4gQmF0bWFuJ3MgdXRpbGl0eSBiZWx0PyBBbmQganVzdCBob3cgcGxhdXNpYmxlIGlzIHRoZSBCYXRtb2JpbGU/IEdldCByZWFkeSBmb3IgYSByZWFsIGxpZmUgdHJpcCB0byB0aGUgQmF0Y2F2ZSBhcyB3ZSByZXZlYWwgdGhlIHNlY3JldHMgYmVoaW5kIEJhdG1hbiBUZWNoLiIsCiAgICAgICJyZWxlYXNlX2RhdGUiOiAiMjAwOC0wNy0yMCIKICAgIH0sCiAgICB7CiAgICAgICJ2b3RlX2NvdW50IjogMSwKICAgICAgImlkIjogMTM4NzU3LAogICAgICAidmlkZW8iOiBmYWxzZSwKICAgICAgInZvdGVfYXZlcmFnZSI6IDUsCiAgICAgICJ0aXRsZSI6ICJKYW1lcyBCYXRtYW4iLAogICAgICAicG9wdWxhcml0eSI6IDEuMDQzNDU2LAogICAgICAicG9zdGVyX3BhdGgiOiAiL3NXYTFZNVFoR3VKTWp3OHV1Rm9nZ0dMcVoweS5qcGciLAogICAgICAib3JpZ2luYWxfbGFuZ3VhZ2UiOiAiZW4iLAogICAgICAib3JpZ2luYWxfdGl0bGUiOiAiSmFtZXMgQmF0bWFuIiwKICAgICAgImdlbnJlX2lkcyI6IFsKICAgICAgICAyOCwKICAgICAgICAxMiwKICAgICAgICAzNSwKICAgICAgICA4NzgKICAgICAgXSwKICAgICAgImJhY2tkcm9wX3BhdGgiOiAiaHR0cHM6Ly93d3cuZHJvcGJveC5jb20vcy8yamRhOGh1MjB5OTlqeGwvY2luZW1hLWZvb2QtbW92aWUtdGhlYXRlci0zMzEyOS5qcGc/ZGw9MCIsCiAgICAgICJhZHVsdCI6IGZhbHNlLAogICAgICAib3ZlcnZpZXciOiAiQW4gZXZpbCBzeW5kaWNhdGUgaXMgc2V0IHRvIGNvbnF1ZXIgdGhlIHdvcmxkLCBhbmQgdGhlIG1pc3Npb24gaXMgdG8gc3RvcCB0aGVtIGZyb20gZnVsZmlsbGluZyB0aGVpciB2aXNjaW91cyBwbGFucy4gVGhlIGNvbnNlcXVlbmNlcyBvZiB0aGVpciBmYWlsdXJlIG1heSBtZWFuIHRoZSBkZXN0cnVjdGlvbiBvZiBhbGwgZGlzc2VudGluZyBjb3VudHJpZXMgd2hvIHN0YW5kIGluIHRoZWlyIHdheS4gQWxsIGNvdW50cmllcyBtdXN0IGJvdyB0byB0aGVpciBwb3dlciBiZWZvcmUgdGhlIGRlYWRsaW5lIG9mIGZpdmUgZGF5cyBleHBpcmVzLiBUaGUgc29sdXRpb24gaXMgc2VuZGluZyBpbiB0aGVpciBiZXN0IG9wZXJhdGl2ZXM7IEphbWVzIEhpa2EsIGFuZCB0aGUgZHluYW1pYyBkdW8gb2YgQmF0bWFuIGFuZCBSb2Jpbi4gVGhleSBhcmUgZmlyc3QgZGV0ZXN0ZWQgd2l0aCB3b3JraW5nIHdpdGggZWFjaCBvdGhlciwgYnV0IGZvciB0aGUgc2FmZXR5IG9mIHRoZSB3b3JsZCwgdGhleSBqb2luIGZvcmNlcy4gVGhyb3VnaCB0aGljayBhbmQgdGhpbiwgdGhleSBzdXJ2aXZlIHRoZSBzeW5kaWNhdGUncyBwbGFuIHRvIGRpc3Bvc2Ugb2YgdGhlbS4gVGhleSBnZXQgY2xvc2VyIHRvIHN0b3BwaW5nIHRoZSBzeW5kaWNhdGUgcGxhbiwgYnV0IHRoZXJlIGlzIGEgdHJhaXRvciBpbiB0aGVpciBtaWRzdC4gV2lsbCB0aGlzIGRldGVyIHRoZW0gZnJvbSBhY2hpZXZpbmcgdGhlaXIgZ29hbD8iLAogICAgICAicmVsZWFzZV9kYXRlIjogIjE5NjYtMTAtMjYiCiAgICB9LAogICAgewogICAgICAidm90ZV9jb3VudCI6IDAsCiAgICAgICJpZCI6IDQ1MTU3MCwKICAgICAgInZpZGVvIjogZmFsc2UsCiAgICAgICJ2b3RlX2F2ZXJhZ2UiOiAwLAogICAgICAidGl0bGUiOiAiQmF0bWFuIEpyLiIsCiAgICAgICJwb3B1bGFyaXR5IjogMS4wMDAxNzcsCiAgICAgICJwb3N0ZXJfcGF0aCI6IG51bGwsCiAgICAgICJvcmlnaW5hbF9sYW5ndWFnZSI6ICJlbiIsCiAgICAgICJvcmlnaW5hbF90aXRsZSI6ICJCYXRtYW4gSnIuIiwKICAgICAgImdlbnJlX2lkcyI6IFsKICAgICAgICAyOCwKICAgICAgICAxOCwKICAgICAgICA1MwogICAgICBdLAogICAgICAiYWR1bHQiOiBmYWxzZSwKICAgICAgIm92ZXJ2aWV3IjogIkFmdGVyIEJhdG1hbiBpcyBtdXJkZXJlZCBieSB0aGUgSm9rZXJzIHNvbiBNaWNoYWVsLCBCYXRtYW5zIHNvbiBKZWZmZXJ5ICBkZWNpZGVzIHRvIGZpbmlzaCBoaXMgZmF0aGVycyBqb2IgaW4gdGhpcyBmYW4gbWFkZSBmYWlsLiIsCiAgICAgICJyZWxlYXNlX2RhdGUiOiAiIgogICAgfSwKICAgIHsKICAgICAgInZvdGVfY291bnQiOiAyOCwKICAgICAgImlkIjogMzAwNDI0LAogICAgICAidmlkZW8iOiBmYWxzZSwKICAgICAgInZvdGVfYXZlcmFnZSI6IDYuMywKICAgICAgInRpdGxlIjogIkxFR08gREMgQ29taWNzIFN1cGVyIEhlcm9lczogQmF0bWFuOiBCZS1MZWFndWVyZWQiLAogICAgICAicG9wdWxhcml0eSI6IDQuNjcwOTYsCiAgICAgICJwb3N0ZXJfcGF0aCI6ICJodHRwczovL3d3dy5kcm9wYm94LmNvbS9zLzJqZGE4aHUyMHk5OWp4bC9jaW5lbWEtZm9vZC1tb3Z2dmllLXRoZWF0ZXItMzMxMjkuanBnP2RsPTAiLAogICAgICAib3JpZ2luYWxfbGFuZ3VhZ2UiOiAiZW4iLAogICAgICAib3JpZ2luYWxfdGl0bGUiOiAiTEVHTyBEQyBDb21pY3MgU3VwZXIgSGVyb2VzOiBCYXRtYW46IEJlLUxlYWd1ZXJlZCIsCiAgICAgICJnZW5yZV9pZHMiOiBbCiAgICAgICAgMjgsCiAgICAgICAgMTIsCiAgICAgICAgMTYsCiAgICAgICAgMTA3NTEKICAgICAgXSwKICAgICAgImFkdWx0IjogZmFsc2UsCiAgICAgICJvdmVydmlldyI6ICJTdXBlcm1hbiB3YW50cyBCYXRtYW4gdG8gam9pbiBoaXMgbmV3IHN1cGVyaGVybyB0ZWFtLCBidXQgQmF0bWFuIHByaWRlcyBoaW1zZWxmIG9uIGJlaW5nIGEgc2VsZi1zdWZmaWNpZW50IGxvbmVyLiIsCiAgICAgICJyZWxlYXNlX2RhdGUiOiAiMjAxNC0xMC0yNyIKICAgIH0sCiAgICB7CiAgICAgICJ2b3RlX2NvdW50IjogMTcsCiAgICAgICJpZCI6IDI2OTI0NiwKICAgICAgInZpZGVvIjogZmFsc2UsCiAgICAgICJ2b3RlX2F2ZXJhZ2UiOiA3LjUsCiAgICAgICJ0aXRsZSI6ICJCYXRtYW4gSmFtZXMgQmF0bWFuIDc1dGggQW5uaXZlcnNhcnkgU2hvcnQiLAogICAgICAicG9wdWxhcml0eSI6IDIuMDY4OTMxLAogICAgICAib3JpZ2luYWxfbGFuZ3VhZ2UiOiAiZW4iLAogICAgICAib3JpZ2luYWxfdGl0bGUiOiAiQmF0bWFuIEJleW9uZCBEYXJ3eW4gQ29va2UncyBCYXRtYW4gNzV0aCBBbm5pdmVyc2FyeSBTaG9ydCIsCiAgICAgICJnZW5yZV9pZHMiOiBbCiAgICAgICAgMjgsCiAgICAgICAgMTYsCiAgICAgICAgODc4LAogICAgICAgIDEwNzcwCiAgICAgIF0sCiAgICAgICJhZHVsdCI6IGZhbHNlLAogICAgICAib3ZlcnZpZXciOiAiVGVycnkgZmFjZXMgb2ZmIGFnYWluc3QgYSBtdWNoIHlvdW5nZXIgQmF0bWFuIiwKICAgICAgInJlbGVhc2VfZGF0ZSI6ICIyMDE0LTA0LTE5IgogICAgfSwKICAgIHsKICAgICAgInZvdGVfY291bnQiOiAxNDQ5MCwKICAgICAgImlkIjogMTU1LAogICAgICAidmlkZW8iOiBmYWxzZSwKICAgICAgInZvdGVfYXZlcmFnZSI6IDguMywKICAgICAgInRpdGxlIjogIlRoZSBEYXJrIEtuaWdodCIsCiAgICAgICJwb3B1bGFyaXR5IjogMzguMjYzOTU0LAogICAgICAib3JpZ2luYWxfbGFuZ3VhZ2UiOiAiZW4iLAogICAgICAib3JpZ2luYWxfdGl0bGUiOiAiVGhlIERhcmsgS25pZ2h0IiwKICAgICAgImdlbnJlX2lkcyI6IFsKICAgICAgICAxOCwKICAgICAgICAyOCwKICAgICAgICA4MCwKICAgICAgICA1MwogICAgICBdLAogICAgICAiYWR1bHQiOiBmYWxzZSwKICAgICAgIm92ZXJ2aWV3IjogIkJhdG1hbiByYWlzZXMgdGhlIHN0YWtlcyBpbiBoaXMgd2FyIG9uIGNyaW1lLiBXaXRoIHRoZSBoZWxwIG9mIEx0LiBKaW0gR29yZG9uIGFuZCBEaXN0cmljdCBBdHRvcm5leSBIYXJ2ZXkgRGVudCwgQmF0bWFuIHNldHMgb3V0IHRvIGRpc21hbnRsZSB0aGUgcmVtYWluaW5nIGNyaW1pbmFsIG9yZ2FuaXphdGlvbnMgdGhhdCBwbGFndWUgdGhlIHN0cmVldHMuIFRoZSBwYXJ0bmVyc2hpcCBwcm92ZXMgdG8gYmUgZWZmZWN0aXZlLCBidXQgdGhleSBzb29uIGZpbmQgdGhlbXNlbHZlcyBwcmV5IHRvIGEgcmVpZ24gb2YgY2hhb3MgdW5sZWFzaGVkIGJ5IGEgcmlzaW5nIGNyaW1pbmFsIG1hc3Rlcm1pbmQga25vd24gdG8gdGhlIHRlcnJpZmllZCBjaXRpemVucyBvZiBHb3RoYW0gYXMgdGhlIEpva2VyLiIsCiAgICAgICJyZWxlYXNlX2RhdGUiOiAiMjAwOC0wNy0xNiIKICAgIH0sCiAgICB7CiAgICAgICJ2b3RlX2NvdW50IjogMSwKICAgICAgImlkIjogNDM4NzQxLAogICAgICAidmlkZW8iOiBmYWxzZSwKICAgICAgInZvdGVfYXZlcmFnZSI6IDgsCiAgICAgICJ0aXRsZSI6ICJCZWluZyBCYXRtYW4iLAogICAgICAicG9wdWxhcml0eSI6IDEuMDgwMTc1LAogICAgICAib3JpZ2luYWxfbGFuZ3VhZ2UiOiAiZW4iLAogICAgICAib3JpZ2luYWxfdGl0bGUiOiAiQmVpbmcgQmF0bWFuIiwKICAgICAgImdlbnJlX2lkcyI6IFsKICAgICAgICA5OQogICAgICBdLAogICAgICAiYWR1bHQiOiBmYWxzZSwKICAgICAgIm92ZXJ2aWV3IjogIlJ5YW4gRnJlZW1hbpJzIHByb2ZpbGUgZG9jdW1lbnRhcnksIEJlaW5nIEJhdG1hbiwgZ2l2ZXMgdXMgYSB0aW55IGdsaW1wc2UgaW50byB0aGUgbGlmZSBvZiBTdGVwaGVuIExhd3JlbmNll2EgbWFuIHdobyBoYXMgc2VsZiBtb25pa2VyZWQgaGltc2VsZiB0aGUgk0JyYW1wdG9uIEJhdG1hbi6UIExhd3JlbmNlLCBkcmVzc2VkIGFzIHRoZSBpY29uaWMgaGVybywgdmVudHVyZXMgb3V0IGF0IG5pZ2h0IHRvIHBhdHJvbCB0aGUgY2l0eSBzdHJlZXRzLiBIZZJzIGEgcmVhbC1saWZlIEJydWNlIFdheW5lLCBjb21wbGV0ZSB3aXRoIGFuIG91dGZpdCBhbmQgYXJzZW5hbCB0aGF0IHdvdWxkIG1ha2UgYW55IGNvc3BsYXllciBncmVlbiB3aXRoIGVudnkuIiwKICAgICAgInJlbGVhc2VfZGF0ZSI6ICIyMDE3LTAxLTMwIgogICAgfSwKICAgIHsKICAgICAgInZvdGVfY291bnQiOiAwLAogICAgICAiaWQiOiAyNDEyMjYsCiAgICAgICJ2aWRlbyI6IGZhbHNlLAogICAgICAidm90ZV9hdmVyYWdlIjogMCwKICAgICAgInRpdGxlIjogIkJhdG1hbjogQSBHb3RoYW0gRmFpcnl0YWxlIiwKICAgICAgInBvcHVsYXJpdHkiOiAxLjU3NDA4OCwKICAgICAgIm9yaWdpbmFsX2xhbmd1YWdlIjogImVuIiwKICAgICAgIm9yaWdpbmFsX3RpdGxlIjogIkJhdG1hbjogQSBHb3RoYW0gRmFpcnl0YWxlIiwKICAgICAgImdlbnJlX2lkcyI6IFsKICAgICAgICAxNiwKICAgICAgICA1MywKICAgICAgICAyOCwKICAgICAgICAxOAogICAgICBdLAogICAgICAiYWR1bHQiOiBmYWxzZSwKICAgICAgIm92ZXJ2aWV3IjogIkNvbXBvc2VkIG9mIG92ZXIgMjAwIGJsYWNrIGFuZCB3aGl0ZSBpbGx1c3RyYXRpb25zLCBpdCBkZXBpY3RzIHRoZSBkYXJrIGltYWdpbmF0aW9uIG9mIGEgbGl0dGxlIGdpcmwgYXMgc2hlJ3MgbGlzdGVuaW5nIHRvIGhlciBncmFuZG1vdGhlciB0ZWxsIGhlciBhIGJlZHRpbWUgZmFpcnl0YWxlLiIsCiAgICAgICJyZWxlYXNlX2RhdGUiOiAiMjAxMy0wOS0wNSIKICAgIH0KICBdCn0\u003d",
                "mime_type": "text/html"
              }
            ],
            "result": {
              "duration": 562436283,
              "status": "passed"
            },
            "line": 23,
            "name": "User submit GET request with below parameter and get movie data response",
            "match": {
              "location": "Steps.user_submit_GET_request_with_below_parameter_and_get_movie_data_response(DataTable)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "Param_Required_q",
                  "batman"
                ],
                "line": 24
              },
              {
                "cells": [
                  "Param_Optional_count",
                  "0"
                ],
                "line": 25
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1967117,
              "status": "passed"
            },
            "line": 26,
            "name": "User verifies response status code is \"200\"",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 39
                }
              ],
              "location": "Steps.user_verifies_response_status_code_is(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "Then "
          },
          {
            "embeddings": [
              {
                "data": "PHRhYmxlIGJvcmRlcj0nMSc+IDx0ciA+IDx0aCBjb2xzcGFuPScxJz48Y2VudGVyPiBCcm9rZW4gUG9zdGVyIFBhdGgvcyBEZXRhaWw8L2NlbnRlcj48L3RoPjx0cj48dGQ+PGxlZnQ+IC9zV2ExWTVRaEd1Sk1qdzh1dUZvZ2dHTHFaMHkuanBnPC9sZWZ0PjwvdGQ+PC90cj48L3RhYmxlPg\u003d\u003d",
                "mime_type": "text/html"
              }
            ],
            "result": {
              "duration": 6726536575,
              "error_message": "java.lang.AssertionError: Poster path contains broken links.\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat com.splunk.actions.MovieActions.verifyPosterPathValidOrNull(MovieActions.java:195)\r\n\tat com.splunk.steps.Steps.user_verifies_all_poster_path_is_either_valid_or_null(Steps.java:33)\r\n\tat ✽.And User verifies all poster path is either valid or null(feature/splunkrestapitest.feature:27)\r\n",
              "status": "failed"
            },
            "line": 27,
            "name": "User verifies all poster path is either valid or null",
            "match": {
              "location": "Steps.user_verifies_all_poster_path_is_either_valid_or_null()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 6,
            "name": "@RegressionTest"
          },
          {
            "line": 21,
            "name": "@SPL-002"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 275824,
              "status": "passed"
            },
            "match": {
              "location": "MovieActions.beforeScenario(Scenario)"
            }
          }
        ],
        "line": 43,
        "name": "Prints movie title in sorted order as per the requirement",
        "description": "",
        "id": "splunk---sdet;prints-movie-title-in-sorted-order-as-per-the-requirement;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "text/html"
              }
            ],
            "result": {
              "duration": 1278665594,
              "status": "passed"
            },
            "line": 35,
            "name": "User submit GET request with below parameter and get movie data response",
            "match": {
              "location": "Steps.user_submit_GET_request_with_below_parameter_and_get_movie_data_response(DataTable)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "Param_Required_q",
                  "batman"
                ],
                "line": 36
              },
              {
                "cells": [
                  "Param_Optional_count",
                  "0"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3063143,
              "status": "passed"
            },
            "line": 38,
            "name": "User verifies response status code is \"200\"",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 39
                }
              ],
              "location": "Steps.user_verifies_response_status_code_is(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "Then "
          },
          {
            "embeddings": [
              {
                "data": "PHRhYmxlIGJvcmRlcj0nMSc+IDx0ciA+IDx0aCBjb2xzcGFuPScxJz48Y2VudGVyPiBTb3J0ZWQgTW92aWUgVGl0bGU8L2NlbnRlcj48L3RoPjx0cj48dGQ+PGxlZnQ+IEJhdG1hbjogQmV5b25kIEJhdG1hbjwvbGVmdD48L3RkPjwvdHI+PHRyPjx0ZD48bGVmdD4gVGhlIERhcmsgS25pZ2h0PC9sZWZ0PjwvdGQ+PC90cj48dHI+PHRkPjxsZWZ0PiBSZXR1cm4gdG8gdGhlIEJhdGNhdmU6IFRoZSBNaXNhZHZlbnR1cmVzIG9mIEFkYW0gYW5kIEJ1cnQ8L2xlZnQ+PC90ZD48L3RyPjx0cj48dGQ+PGxlZnQ+IFRoZSBEYXJrIEtuaWdodCBSaXNlczwvbGVmdD48L3RkPjwvdHI+PHRyPjx0ZD48bGVmdD4gQmF0bWFuIGFuZCBSb2JpbjwvbGVmdD48L3RkPjwvdHI+PHRyPjx0ZD48bGVmdD4gSmFtZXMgQmF0bWFuPC9sZWZ0PjwvdGQ+PC90cj48dHI+PHRkPjxsZWZ0PiBCYXRtYW4gVGVjaDwvbGVmdD48L3RkPjwvdHI+PHRyPjx0ZD48bGVmdD4gQmF0bWFuOiBBIEdvdGhhbSBGYWlyeXRhbGU8L2xlZnQ+PC90ZD48L3RyPjx0cj48dGQ+PGxlZnQ+IEJhdG1hbiBKYW1lcyBCYXRtYW4gNzV0aCBBbm5pdmVyc2FyeSBTaG9ydDwvbGVmdD48L3RkPjwvdHI+PHRyPjx0ZD48bGVmdD4gU2Nvb2J5LURvbyBNZWV0cyBEYW50ZTwvbGVmdD48L3RkPjwvdHI+PHRyPjx0ZD48bGVmdD4gTEVHTyBEQyBDb21pY3MgU3VwZXIgSGVyb2VzOiBCYXRtYW46IEJlLUxlYWd1ZXJlZDwvbGVmdD48L3RkPjwvdHI+PHRyPjx0ZD48bGVmdD4gRGFudGU8L2xlZnQ+PC90ZD48L3RyPjx0cj48dGQ+PGxlZnQ+IEJhdG1hbjogUmV0dXJuIG9mIHRoZSBLYXlhayBDcnVzYWRlcnM8L2xlZnQ+PC90ZD48L3RyPjx0cj48dGQ+PGxlZnQ+IEJhdG1hbiBVbmxpbWl0ZWQ6IE1lY2hzIHZzLiBNdXRhbnRzPC9sZWZ0PjwvdGQ+PC90cj48dHI+PHRkPjxsZWZ0PiBCZWluZyBCYXRtYW48L2xlZnQ+PC90ZD48L3RyPjx0cj48dGQ+PGxlZnQ+IEJhdG1hbiBKci48L2xlZnQ+PC90ZD48L3RyPjwvdGFibGU+",
                "mime_type": "text/html"
              }
            ],
            "result": {
              "duration": 480213800,
              "status": "passed"
            },
            "line": 39,
            "name": "User prints movie title in sorted order as per the requirement",
            "match": {
              "location": "Steps.user_prints_movie_title_in_sorted_order_as_per_the_requirement()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 6,
            "name": "@RegressionTest"
          },
          {
            "line": 33,
            "name": "@SPL-003"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 71843,
              "status": "passed"
            },
            "match": {
              "location": "MovieActions.beforeScenario(Scenario)"
            }
          }
        ],
        "line": 55,
        "name": "Prints movie title whose sum of genre ids \u003e 400",
        "description": "",
        "id": "splunk---sdet;prints-movie-title-whose-sum-of-genre-ids-\u003e-400;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "text/html"
              }
            ],
            "result": {
              "duration": 197730290,
              "status": "passed"
            },
            "line": 48,
            "name": "User submit GET request with below parameter and get movie data response",
            "match": {
              "location": "Steps.user_submit_GET_request_with_below_parameter_and_get_movie_data_response(DataTable)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "Param_Required_q",
                  "batman"
                ],
                "line": 49
              },
              {
                "cells": [
                  "Param_Optional_count",
                  "0"
                ],
                "line": 50
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 692339,
              "status": "passed"
            },
            "line": 51,
            "name": "User verifies response status code is \"200\"",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 39
                }
              ],
              "location": "Steps.user_verifies_response_status_code_is(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "Then "
          },
          {
            "embeddings": [
              {
                "data": "PHRhYmxlIGJvcmRlcj0nMSc+PHRyPjx0ZD48bGVmdD48Yj4gTW92aWUgVGl0bGUgIDwvYj48L2xlZnQ+PC90ZD48dGQ+PGxlZnQ+PGI+IEdlcm5lciBJZHMgd2hvc2Ugc3VtIGlzIGdyZWF0ZXIgdGhhbiA0MDAgPC9iPjwvbGVmdD48L3RkPjwvdHI+PHRyPjx0ZD48bGVmdD4gSmFtZXMgQmF0bWFuPC9sZWZ0PjwvdGQ+PHRkPjxsZWZ0PiBbMjgsIDEyLCAzNSwgODc4XTwvbGVmdD48L3RkPjwvdHI+PHRyPjx0ZD48bGVmdD4gU2Nvb2J5LURvbyBNZWV0cyBEYW50ZTwvbGVmdD48L3RkPjx0ZD48bGVmdD4gWzEwNzUxLCAxNl08L2xlZnQ+PC90ZD48L3RyPjx0cj48dGQ+PGxlZnQ+IEJhdG1hbiBhbmQgUm9iaW48L2xlZnQ+PC90ZD48dGQ+PGxlZnQ+IFsyOCwgODc4LCA1M108L2xlZnQ+PC90ZD48L3RyPjx0cj48dGQ+PGxlZnQ+IExFR08gREMgQ29taWNzIFN1cGVyIEhlcm9lczogQmF0bWFuOiBCZS1MZWFndWVyZWQ8L2xlZnQ+PC90ZD48dGQ+PGxlZnQ+IFsyOCwgMTIsIDE2LCAxMDc1MV08L2xlZnQ+PC90ZD48L3RyPjx0cj48dGQ+PGxlZnQ+IEJhdG1hbiBKYW1lcyBCYXRtYW4gNzV0aCBBbm5pdmVyc2FyeSBTaG9ydDwvbGVmdD48L3RkPjx0ZD48bGVmdD4gWzI4LCAxNiwgODc4LCAxMDc3MF08L2xlZnQ+PC90ZD48L3RyPjwvdGFibGU+",
                "mime_type": "text/html"
              }
            ],
            "result": {
              "duration": 293989860,
              "status": "passed"
            },
            "line": 52,
            "name": "User prints movie title whose sum of genre ids \u003e 400",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 49
                }
              ],
              "location": "Steps.user_prints_movie_title_whose_sum_of_genre_ids(int)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 6,
            "name": "@RegressionTest"
          },
          {
            "line": 46,
            "name": "@SPL-004"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 90230,
              "status": "passed"
            },
            "match": {
              "location": "MovieActions.beforeScenario(Scenario)"
            }
          }
        ],
        "line": 68,
        "name": "Print movie title/s with pallindrome string in it",
        "description": "",
        "id": "splunk---sdet;print-movie-title/s-with-pallindrome-string-in-it;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "text/html"
              }
            ],
            "result": {
              "duration": 256408951,
              "status": "passed"
            },
            "line": 60,
            "name": "User submit GET request with below parameter and get movie data response",
            "match": {
              "location": "Steps.user_submit_GET_request_with_below_parameter_and_get_movie_data_response(DataTable)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "Param_Required_q",
                  "batman"
                ],
                "line": 61
              },
              {
                "cells": [
                  "Param_Optional_count",
                  "0"
                ],
                "line": 62
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 573030,
              "status": "passed"
            },
            "line": 63,
            "name": "User verifies response status code is \"200\"",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 39
                }
              ],
              "location": "Steps.user_verifies_response_status_code_is(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "Then "
          },
          {
            "embeddings": [
              {
                "data": "PHRhYmxlIGJvcmRlcj0nMSc+PHRyPjx0ZD48bGVmdD48Yj4gTW92aWUgVGl0bGUgPC9iPjwvbGVmdD48L3RkPjx0ZD48bGVmdD48Yj4gUGFsbGluZHJvbWUgaW4gbW92aWUgdGl0bGUgPC9iPjwvbGVmdD48L3RkPjwvdHI+PHRyPjx0ZD48bGVmdD4gQmF0bWFuOiBSZXR1cm4gb2YgdGhlIEtheWFrIENydXNhZGVyczwvbGVmdD48L3RkPjx0ZD48bGVmdD4gIEtheWFrPC9sZWZ0PjwvdGQ+PC90cj48L3RhYmxlPg\u003d\u003d",
                "mime_type": "text/html"
              }
            ],
            "result": {
              "duration": 26201139,
              "status": "passed"
            },
            "line": 64,
            "name": "User print the movie title with pallindrome string in it",
            "match": {
              "location": "Steps.user_print_the_movie_title_with_pallindrome_string_in_it()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 6,
            "name": "@RegressionTest"
          },
          {
            "line": 58,
            "name": "@SPL-005"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 79968,
              "status": "passed"
            },
            "match": {
              "location": "MovieActions.beforeScenario(Scenario)"
            }
          }
        ],
        "line": 80,
        "name": "Print movie title/s which contains title of another movie",
        "description": "",
        "id": "splunk---sdet;print-movie-title/s-which-contains-title-of-another-movie;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "text/html"
              }
            ],
            "result": {
              "duration": 302959912,
              "status": "passed"
            },
            "line": 72,
            "name": "User submit GET request with below parameter and get movie data response",
            "match": {
              "location": "Steps.user_submit_GET_request_with_below_parameter_and_get_movie_data_response(DataTable)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "rows": [
              {
                "cells": [
                  "Param_Required_q",
                  "batman"
                ],
                "line": 73
              },
              {
                "cells": [
                  "Param_Optional_count",
                  "0"
                ],
                "line": 74
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 703885,
              "status": "passed"
            },
            "line": 75,
            "name": "User verifies response status code is \"200\"",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 39
                }
              ],
              "location": "Steps.user_verifies_response_status_code_is(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "Then "
          },
          {
            "embeddings": [
              {
                "data": "PHRhYmxlIGJvcmRlcj0nMSc+PHRyPjx0ZD48bGVmdD48Yj4gTW92aWUgVGl0bGUgY29udGFpbmluZyBhbm90aGVyIG1vdmllIHRpdGxlIDwvYj48L2xlZnQ+PC90ZD48dGQ+PGxlZnQ+PGI+IEFub3RoZXIgTW92aWUgVGl0bGUgPC9iPjwvbGVmdD48L3RkPjwvdHI+PHRyPjx0ZD48bGVmdD4gVGhlIERhcmsgS25pZ2h0IFJpc2VzPC9sZWZ0PjwvdGQ+PHRkPjxsZWZ0PiBUaGUgRGFyayBLbmlnaHQ8L2xlZnQ+PC90ZD48L3RyPjx0cj48dGQ+PGxlZnQ+IFNjb29ieS1Eb28gTWVldHMgRGFudGU8L2xlZnQ+PC90ZD48dGQ+PGxlZnQ+IERhbnRlPC9sZWZ0PjwvdGQ+PC90cj48dHI+PHRkPjxsZWZ0PiBCYXRtYW4gSmFtZXMgQmF0bWFuIDc1dGggQW5uaXZlcnNhcnkgU2hvcnQ8L2xlZnQ+PC90ZD48dGQ+PGxlZnQ+IEphbWVzIEJhdG1hbjwvbGVmdD48L3RkPjwvdHI+PC90YWJsZT4\u003d",
                "mime_type": "text/html"
              }
            ],
            "result": {
              "duration": 123873184,
              "status": "passed"
            },
            "line": 76,
            "name": "User print movie title/s which contains title of another movie",
            "match": {
              "location": "Steps.user_print_movie_title_s_which_contains_title_of_another_movie()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 70,
            "name": "@SPL-006"
          },
          {
            "line": 6,
            "name": "@RegressionTest"
          }
        ]
      }
    ],
    "name": "Splunk - SDET",
    "description": "",
    "id": "splunk---sdet",
    "keyword": "Feature",
    "uri": "feature/splunkrestapitest.feature",
    "tags": [
      {
        "line": 6,
        "name": "@RegressionTest"
      }
    ]
  }
]